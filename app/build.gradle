apply plugin: 'com.android.application'
//https://developer.android.google.cn/studio/projects/android-library

android {
    namespace 'test.mxm.android_app_template'
    compileSdk 33
    defaultConfig {
        applicationId "test.mxm.android_app_template"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk.abiFilters 'arm64-v8a','armeabi-v7a'//,'x86','x86_64'

        //自定义打包名称，不完全自定义，后面自动会加上${buildType.name}
        archivesBaseName = "Template_v${versionName}_${generateTime()}"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//构建时间
def generateTime() {
    return new Date().format("yyyy-MM-dd HH时mm分ss秒")
}
// 自定义打包名称，完全自定义
//android.applicationVariants.all { variant ->
//    variant.outputs.all {
//        outputFileName = "Template_${buildType.name}_v${versionName}_${generateTime()}.apk"
//    }
//}

// 这个貌似必须放到 dependencies 之前，才能在 dependencies 中使用
def localGroup = 'test.mxm.local'
def localArtifactId = 'xxxAndroid'
def versionName = '1.0.0'

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    // 引入本地库
//    implementation "$localGroup:$localArtifactId:$versionName"

    implementation "androidx.metrics:metrics-performance:1.0.0-beta01" // 跟踪和报告应用的各种运行时指标
    implementation "androidx.exifinterface:exifinterface:1.3.7"   // 读取和写入图片文件 EXIF 标记

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // 在 Android Studio 中准确衡量代码性能, 性能测试框架
    androidTestImplementation "androidx.benchmark:benchmark-macro-junit4:1.3.0"
    // 远程测试框架
    androidTestImplementation "androidx.test.uiautomator:uiautomator:2.4.0-alpha01"
}

/*
  把本地aar依赖库发布到本地 maven 源，以下代码必须放在 module 的 build.gradle 文件中，
  否则 Android Studio 的 gradle 工具中看不到 publishing 任务，
  双击 publishing 任务中的 publish 即可发布到本地，然后就可以看到 app 文件夹的平级文件夹 LocalMavenRepo
 */
apply plugin: 'maven-publish' // 发布到 maven 必须用的插件
def localMavenRepoUrl = '../LocalMavenRepo' // 项目本地源存放目录，
allprojects {
    // 给当前 module 添加本地源，当前 module 非 app module 时，也要给 app module 添加此本地源，否则正式打包签名会报错
    repositories {
        maven { url localMavenRepoUrl }
    }
}

publishing {
    publications {
        // 创建一个 Maven publication 任务叫 "myTask1".
        myTask1(MavenPublication) {
            groupId = localGroup
            artifactId = localArtifactId
            version = versionName
            artifact 'libs/xxx.aar' // aar文件的路径
        }
//        myTask2(MavenPublication) {
//            groupId = localGroup2
//            artifactId = localArtifactId2
//            version = versionName2
//            artifact 'libs/xxx2.aar' // aar文件的路径
//        }
    }

    repositories {
        maven {
            // 上传到项目本地仓库
            url localMavenRepoUrl
        }
    }
}
